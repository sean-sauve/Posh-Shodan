#  .ExternalHelp Posh-Shodan.Help.xml
function Search-ShodanExploit {
    [CmdletBinding(
        DefaultParameterSetName = 'Direct'
    )]
    param (
        # Shodan developer API key
        [String]
        $ApiKey,

        [String]
        $CertificateThumbprint,

        [Parameter(ParameterSetName = 'Proxy')]
        [String]
        $Proxy,

        [Parameter(ParameterSetName = 'Proxy')]
        [Management.Automation.PSCredential]
        $ProxyCredential,

        [Parameter(ParameterSetName = 'Proxy')]
        [Switch]
        $ProxyUseDefaultCredentials,

        # list of properties to get summary information on.
        [ValidateSet(
            'author', 'platform', 'port', 'source', 'type'
        )]
        [String[]]
        $Facets,

        # Text to query for.
        [String]
        $Query,

        [Int]
        $Page,

        # CVE ID
        [String]
        $Cve,

        # OpenSource Vulnerability Database ID
        [String]
        $Osvdb,

        # SecurityFocus BID Number
        [String]
        $Bid,

        # Microsoft Buletin (MS012-020)
        [String]
        $Msb,

        [ValidateSet(
            'aix', 'asp', 'bsd', 'bsd/ppc', 'bsd/x86','bsdi/x86','cgi',
            'freebsd','freebsd/x86','freebsd/x86-64','generator','hardware', 'hp-ux',
            'irix', 'jsp', 'linux', 'linux/amd64', 'linux/mips', 'linux/ppc', 'linux/sparc',
            'linux/x86', 'linux/x86-64', 'minix', 'multiple', 'netbsd/x86', 'novell', 'openbsd',
            'openbsd/x86', 'os-x/ppc', 'osx', 'php','plan9', 'qnx', 'sco', 'sco/x86',
            'solaris', 'solaris/sparc', 'solaris/x86', 'tru64', 'ultrix', 'unix', 'unixware',
            'win32','win64','windows','arm','cfm'
        )]
        [String]
        $Platform,

        [ValidateSet(
            'Local', 'Papers', 'Remote', 'Shellcode', 'WebApps', 'DoS'
        )]
        [String]
        $Type,

        # The port number for the affected service if the exploit is remote.
        [Int]
        $Port,

        # The author of the exploit/ vulnerability.
        [String]
        $Author,

        #  When the exploit was released  format day/month/year..
        [String]
        $Date,

        #  The description of the exploit, how it works and where it applies.
        [String]
        $Description,

        # The title or short description for the exploit if available.
        [string]
        $Title
    )

    begin {
        $QueryDefinionHash = @{
            'Cve'         = { $Query += " cve:$($Cve.Trim())" }
            'Osvdb'       = { $Query += " osvdb:$($Osvdb.Trim())" }
            'Bid'         = { $Query += " bid:$($Bid.Trim())" }
            'Msb'         = { $Query += " msb:$($Msb.Trim())" }
            'Platform'    = { $Query += " platform:$($Platform.Trim())" }
            'Type'        = { $Query += " type:$($Type.Trim())" }
            'Port'        = { $Query += " port:$($Port)" }
            'Author'      = { $Query += " author:$($Author.Trim())" }
            'Date'        = { $Query += " date:$($Date.Trim())" }
            'Description' = { $Query += " description:$($Description.Trim())" }
            'Title'       = { $Query += " title:$($Title.Trim())" }
        }
        if ($PSBoundParameters.ContainsKey('Query') -and ('' -ne $Query) -and ($null -ne $Query)) {
            $LocalQuery = @( $Query )
        }
        else {
            $LocalQuery = @()
        }
        $QueryArray = foreach ($QueryDefinion in $QueryDefinionHash.GetEnumerator()) {
            if ($PSBoundParameters.ContainsKey($QueryDefinion.Key)) {
                Invoke-Command -ScriptBlock $QueryDefinion.Value
            }
        }
        $LocalQuery += $QueryArray
        $Body = @{
            'query' = ($LocalQuery -join ' ')
        }
        $InvokeParameters = @{
            'Method'     = 'GET'
            'Uri'        = 'https://exploits.shodan.io/api/search'
            'PSTypeName' = 'Shodan.Exploit.Search'
            'Body'       = $Body
        }
        $InvokeParameters = Add-ShodanPassthroughParameter -FromHashtable $PSBoundParameters -ToHashTable $InvokeParameters
    }
    process {
        Invoke-ShodanRestMethod @InvokeParameters
    }
    end {
    }
}
